"""add batch processing fields to processing results

Revision ID: e7eefe71f17f
Revises: c8c08b41fdd7
Create Date: 2025-03-20 16:37:11.258991

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e7eefe71f17f'
down_revision: Union[str, None] = 'c8c08b41fdd7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('addresses')
    op.add_column('processing_results', sa.Column('question_ids', sa.JSON(), nullable=True))
    op.add_column('processing_results', sa.Column('batch_index', sa.Integer(), nullable=True))
    
    # Convert llm_stop_sequences from ARRAY to JSON
    op.execute('ALTER TABLE processors ALTER COLUMN llm_stop_sequences TYPE JSON USING array_to_json(llm_stop_sequences)')
    
    op.alter_column('question_responses', 'question_configuration',
               existing_type=postgresql.JSON(),
               nullable=True)
    
    # Add created_at and updated_at columns with default values
    op.add_column('questions', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('questions', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.execute("UPDATE questions SET created_at = NOW(), updated_at = NOW()")
    op.alter_column('questions', 'created_at', nullable=False)
    op.alter_column('questions', 'updated_at', nullable=False)
    
    op.alter_column('questions', 'page_number',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index('ix_questions_order', table_name='questions')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('ix_questions_order', 'questions', ['order'], unique=False)
    op.alter_column('questions', 'page_number',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('questions', 'updated_at')
    op.drop_column('questions', 'created_at')
    op.alter_column('question_responses', 'question_configuration',
               existing_type=postgresql.JSON(),
               nullable=False)
    op.alter_column('processors', 'llm_stop_sequences',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=True)
    op.drop_column('processing_results', 'batch_index')
    op.drop_column('processing_results', 'question_ids')
    op.create_table('addresses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('street_address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('state', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('postal_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='addresses_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='addresses_pkey')
    )
    # ### end Alembic commands ###
